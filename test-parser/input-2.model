/*
 * Copyright (c) 2015-2016, Salesforce.com, Inc.
 * All rights reserved.
 * Licensed under the MIT license.
 * For full license text, see LICENSE.md file in the repo root or
 * https://opensource.org/licenses/MIT
 */

type ServerId: 1..5;

type Token: either {
  AtServer {
    at: ServerId,
  },
  InTransit {
    from: ServerId,
    to: ServerId,
  },
}
var token: Token;

type Server: record {
  hasToken: Boolean,
}

var servers: Array<Server>[ServerId];
servers[1].hasToken = True;

rule deliverToken {
  match token {
    InTransit(transit) {
      servers[transit.to].hasToken = True;
      token = AtServer { at: transit.to };
    }
    AtServer { /* do nothing */ }
  }
}

rule passToken for id, server in servers {
  if server.hasToken {
    var next : ServerId = id % 5 + 1;
    token = InTransit {
      from: id,
      to: next,
    };
    server.hasToken = False;
  }
}

invariant tokenAgreement {
  for id, server in servers {
    match token {
      InTransit {
        assert !server.hasToken;
      }
      AtServer(t) {
        assert server.hasToken == (t.at == id);
      }
    }
  }
}
